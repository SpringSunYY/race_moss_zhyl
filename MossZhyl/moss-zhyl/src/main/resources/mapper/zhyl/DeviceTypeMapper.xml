<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.moss.zhyl.mapper.DeviceTypeMapper">
    
    <resultMap type="DeviceType" id="DeviceTypeResult">
        <result property="typeId"    column="type_id"    />
        <result property="name"    column="name"    />
        <result property="deviceType"    column="device_type"    />
        <result property="remark"    column="remark"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>

    <sql id="selectDeviceTypeVo">
        select type_id, name, device_type, remark, create_by, create_time, update_time from yl_device_type
    </sql>

    <select id="selectDeviceTypeList" parameterType="DeviceType" resultMap="DeviceTypeResult">
        <include refid="selectDeviceTypeVo"/>
        <where>  
            <if test="name != null  and name != ''"> and name like concat('%', #{name}, '%')</if>
            <if test="deviceType != null  and deviceType != ''"> and device_type like concat('%', #{deviceType}, '%')</if>
            <if test="createBy != null  and createBy != ''"> and create_by like concat('%', #{createBy}, '%')</if>
            <if test="params.beginCreateTime != null and params.beginCreateTime != '' and params.endCreateTime != null and params.endCreateTime != ''"> and create_time between #{params.beginCreateTime} and #{params.endCreateTime}</if>
            <if test="params.beginUpdateTime != null and params.beginUpdateTime != '' and params.endUpdateTime != null and params.endUpdateTime != ''"> and update_time between #{params.beginUpdateTime} and #{params.endUpdateTime}</if>
        </where>
        order by create_time desc
    </select>
    
    <select id="selectDeviceTypeByTypeId" parameterType="Long" resultMap="DeviceTypeResult">
        <include refid="selectDeviceTypeVo"/>
        where type_id = #{typeId}
    </select>
    <select id="selectDeviceTypeByDeviceType"  resultMap="DeviceTypeResult">
        <include refid="selectDeviceTypeVo"/>
        where device_type = #{deviceType}
    </select>

    <insert id="insertDeviceType" parameterType="DeviceType">
        insert into yl_device_type
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="typeId != null">type_id,</if>
            <if test="name != null and name != ''">name,</if>
            <if test="deviceType != null and deviceType != ''">device_type,</if>
            <if test="remark != null">remark,</if>
            <if test="createBy != null and createBy != ''">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="typeId != null">#{typeId},</if>
            <if test="name != null and name != ''">#{name},</if>
            <if test="deviceType != null and deviceType != ''">#{deviceType},</if>
            <if test="remark != null">#{remark},</if>
            <if test="createBy != null and createBy != ''">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateDeviceType" parameterType="DeviceType">
        update yl_device_type
        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null and name != ''">name = #{name},</if>
            <if test="deviceType != null and deviceType != ''">device_type = #{deviceType},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="createBy != null and createBy != ''">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where type_id = #{typeId}
    </update>

    <delete id="deleteDeviceTypeByTypeId" parameterType="Long">
        delete from yl_device_type where type_id = #{typeId}
    </delete>

    <delete id="deleteDeviceTypeByTypeIds" parameterType="String">
        delete from yl_device_type where type_id in 
        <foreach item="typeId" collection="array" open="(" separator="," close=")">
            #{typeId}
        </foreach>
    </delete>
</mapper>