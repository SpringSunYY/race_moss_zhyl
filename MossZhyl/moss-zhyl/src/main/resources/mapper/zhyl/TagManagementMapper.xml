<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.moss.zhyl.mapper.TagManagementMapper">

    <resultMap type="TagManagement" id="TagManagementResult">
        <result property="tagId"    column="tag_id"    />
        <result property="tagName"    column="tag_name"    />
        <result property="remark"    column="remark"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>

    <sql id="selectTagManagementVo">
        select tag_id, tag_name, remark, create_time, update_time from yl_tag_management
    </sql>

    <select id="selectTagManagementList" parameterType="TagManagement" resultMap="TagManagementResult">
        <include refid="selectTagManagementVo"/>
        <where>
            <if test="tagId != null "> and tag_id = #{tagId}</if>
            <if test="tagName != null  and tagName != ''"> and tag_name like concat('%', #{tagName}, '%')</if>
            <if test="params.beginCreateTime != null and params.beginCreateTime != '' and params.endCreateTime != null and params.endCreateTime != ''"> and create_time between #{params.beginCreateTime} and #{params.endCreateTime}</if>
            <if test="params.beginUpdateTime != null and params.beginUpdateTime != '' and params.endUpdateTime != null and params.endUpdateTime != ''"> and update_time between #{params.beginUpdateTime} and #{params.endUpdateTime}</if>
        </where>
        order by create_time desc
    </select>

    <select id="selectTagManagementByTagId" parameterType="Long" resultMap="TagManagementResult">
        <include refid="selectTagManagementVo"/>
        where tag_id = #{tagId}
    </select>

    <insert id="insertTagManagement" parameterType="TagManagement" useGeneratedKeys="true" keyProperty="tagId">
        insert into yl_tag_management
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="tagName != null and tagName != ''">tag_name,</if>
            <if test="remark != null">remark,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="tagName != null and tagName != ''">#{tagName},</if>
            <if test="remark != null">#{remark},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
        </trim>
    </insert>

    <update id="updateTagManagement" parameterType="TagManagement">
        update yl_tag_management
        <trim prefix="SET" suffixOverrides=",">
            <if test="tagName != null and tagName != ''">tag_name = #{tagName},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where tag_id = #{tagId}
    </update>

    <delete id="deleteTagManagementByTagId" parameterType="Long">
        delete from yl_tag_management where tag_id = #{tagId}
    </delete>

    <delete id="deleteTagManagementByTagIds" parameterType="String">
        delete from yl_tag_management where tag_id in
        <foreach item="tagId" collection="array" open="(" separator="," close=")">
            #{tagId}
        </foreach>
    </delete>
</mapper>